#!/usr/bin/python
import csv
import re
import string
from terminaltables import AsciiTable
import sys

class q:

    def query(self, query_string):
        rows = self.get_search_rows(query_string)

        if not rows:
            return False

        print_line = []
        whole_table = []
        column_name = rows['select']
        whole_table.append(column_name)

        with open('db.csv') as csvfile:
            lines = csv.DictReader(csvfile)
            i = 1
            sum = 0


            for line in lines:

                if rows['select'][0] == "FIND":
                    if re.search("(" + rows['search'] + ")", line['name']):
                        whole_table.append([line['name']])

                    continue

                if rows['select'] == "SUM":
                    sum = sum + 1
                    continue

                for row in rows['select']:
                    if row == '':
                        continue

                    print_line.append(line[row])

                whole_table.append(print_line)
                print_line = []

                if 'limit' in rows:
                    if i == int(rows['limit']):
                        break
                    else:
                        i = i +1


        if rows['select'] == "SUM":
            return sum
        else:
            table = AsciiTable(whole_table)
            return table.table

                

    def get_search_rows(self, query_string):

        if query_string == "SUM":
            return {"select" : "SUM"}

        try: # FIND test
            match = re.search("\FIND (\w+)", query_string)
            match =  match.groups()
            row = match[0].strip()
            return {"select" : ["FIND"], "search" : row}
        except Exception:
            pass

        try: # SELECT id, name LIMIT 1
            match = re.search("\SELECT\s(.*)\s\LIMIT\s(\d+)", query_string)
            match =  match.groups()
            rows = match[0].strip()
            rows = string.split(match[0], ',')
            query_rows = []

            for row in rows:
                query_rows.append(row.strip())

            return {"select" : query_rows, "limit" : match[1]}
        except Exception:
            pass

        try: # SELECT id, name
            match = re.search("\SELECT\s(.*)", query_string)
            match =  match.groups()
            rows = match[0].strip()
            rows = string.split(match[0], ',')
            query_rows = []

            for row in rows:
                query_rows.append(row.strip())

            return {"select" : query_rows}
        except Exception:
            print "wrong syntax"
            return False




if not sys.argv[1]:
    print "no arguments"
else:
    test = q()
    print test.query(sys.argv[1]);
